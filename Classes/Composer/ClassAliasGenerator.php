<?php
namespace Helhum\ClassAliasLoader\Composer;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2015 Helmut Hummel <helmut.hummel@typo3.org>
 *  All rights reserved
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *  A copy is found in the text file GPL.txt and important notices to the license
 *  from the author is found in LICENSE.txt distributed with these scripts.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use Composer\Util\Filesystem;

/**
 * Class ClassAliasLoader
 */
class ClassAliasGenerator {


	static public function generateAliasMap(\Composer\Script\Event $event) {

		$event->getIO()->write('<info>Generating class alias map files</info>');


		$composer = $event->getComposer();
		$config = $composer->getConfig();

		$filesystem = new Filesystem();
		$filesystem->ensureDirectoryExists($config->get('vendor-dir'));
		$basePath = $filesystem->normalizePath(realpath(getcwd()));
		$vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));
		$targetDir = $vendorPath . '/composer';
		$filesystem->ensureDirectoryExists($targetDir);

		$mainPackage = $composer->getPackage();
		$autoLoadGenerator = $composer->getAutoloadGenerator();
		$localRepo = $composer->getRepositoryManager()->getLocalRepository();
		$packageMap = $autoLoadGenerator->buildPackageMap($composer->getInstallationManager(), $mainPackage, $localRepo->getCanonicalPackages());

		$aliasToClassNameMapping = array();
		$classNameToAliasMapping = array();
		$mappingFound = false;


		foreach ($packageMap as $item) {
			list($package, $installPath) = $item;
			$extra = $package->getExtra();

			if (!empty($extra['class-alias-maps'])) {
				if (!is_array($extra['class-alias-maps'])) {
					throw new \Exception('"class-alias-maps" must be an array');
				}
				foreach ($extra['class-alias-maps'] as $mapFile) {
					$mapFilePath = $basePath . '/' . ($installPath ? $installPath . '/' : '') . $filesystem->normalizePath($mapFile);
					if (is_file($mapFilePath)) {
						$packageAliasMap = require $mapFilePath;
						if (!is_array($packageAliasMap)) {
							throw new \Exception('"class alias maps" must return an array', 1422625075);
						}
						if (!empty($packageAliasMap)) {
							$mappingFound = true;
						}
						foreach ($packageAliasMap as $aliasClassName => $className) {
							$lowerCasedAliasClassName = strtolower($aliasClassName);
							$aliasToClassNameMapping[$lowerCasedAliasClassName] = $className;
							$classNameToAliasMapping[$className][$lowerCasedAliasClassName] = $lowerCasedAliasClassName;
						}
					}
				}
			}
		}

		if (!$mappingFound) {
			return false;
		}

		$exportArray = array(
			'aliasToClassNameMapping' => $aliasToClassNameMapping,
			'classNameToAliasMapping' => $classNameToAliasMapping
		);

		$fileContent = '<?php' . chr(10) . 'return ';
		$fileContent .= var_export($exportArray, true);
		$fileContent .= ';';

		file_put_contents($targetDir . '/autoload_classaliasmap.php', $fileContent);
		$originalAutoloadFileContent = file_get_contents($vendorPath . '/autoload.php');
		preg_match('/return ComposerAutoloaderInit[^;]*;/', $originalAutoloadFileContent, $matches);
		$originalAutoloadFileContent = str_replace($matches[0], '', $originalAutoloadFileContent);
		$composerClassLoaderInit = str_replace(array('return ', ';'), '', $matches[0]);
		$autoloadFileContent = <<<EOF
$originalAutoloadFileContent

// autoload.php @generated by Helhum/ClassAliasLoader

return call_user_func(function() {
	\$composerClassLoader = $composerClassLoaderInit;
	\$aliasClassLoader = new Helhum\ClassAliasLoader\Composer\ClassAliasLoader(\$composerClassLoader);

	\$classAliasMap = require __DIR__ . '/composer/autoload_classaliasmap.php';

	\$aliasClassLoader->setAliasMap(\$classAliasMap);

	spl_autoload_register(array(\$aliasClassLoader, 'loadClassWithAlias'), true, true);

	return \$aliasClassLoader;
});

EOF;



		file_put_contents($vendorPath . '/autoload.php', $autoloadFileContent);


		return true;
	}
}